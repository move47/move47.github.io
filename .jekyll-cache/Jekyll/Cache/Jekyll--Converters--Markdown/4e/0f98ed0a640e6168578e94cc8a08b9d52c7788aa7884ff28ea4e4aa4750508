I"<p>As the paint tool was wrapped up, up came the task of modelling a 3D cycle. Iâ€™d never modelled anything from scratch in 3-D before this, and itâ€™s been a wonderful experience!</p>

<p>Hereâ€™s how our final product looks like -</p>

<p><img src="https://martiansideofthemoon.github.io/assets/cycle.png" alt="cycle" /></p>

<p>Without going into the gory details, hereâ€™s how this task was achieved -</p>

<h2 id="base-object">Base Object</h2>

<p>There is a base class <code class="language-plaintext highlighter-rouge">BaseObject</code> that contains the basic format of all objects. Every object has children (<a href="http://www.gamedev.net/page/resources/_/technical/opengl/opengl-object-hierarchy-r1267">hierarchial modelling</a>), and a specific render sequence. It is customary to render all children first and apply all the transformations on the parent to the children.</p>

<p>This is implemented using the <code class="language-plaintext highlighter-rouge">glPushMatrix()</code> and <code class="language-plaintext highlighter-rouge">glPopMatrix()</code> pair.</p>

<h2 id="parts">Parts</h2>

<p>Each individual part of the cycle is inherited from the <code class="language-plaintext highlighter-rouge">BaseObject</code> along with suitable parameters. An example is the <code class="language-plaintext highlighter-rouge">Wheel</code> part, which has parameters like <code class="language-plaintext highlighter-rouge">wheel_radius</code>, <code class="language-plaintext highlighter-rouge">spokes</code>, <code class="language-plaintext highlighter-rouge">wheel_center</code>, <code class="language-plaintext highlighter-rouge">wheel_normal</code> and <code class="language-plaintext highlighter-rouge">wheel_color[2]</code>. The rotate function is suitable constrained to prevent rotation on non normal axes.</p>

<h2 id="assembly">Assembly</h2>

<p>A <code class="language-plaintext highlighter-rouge">Cycle</code> class has been written which assembles the entire cycle. It reads parameters from a file and makes objects of the various part classes. Parent-Children relationships are correctly established in this function.</p>

<p>The <code class="language-plaintext highlighter-rouge">Cycle</code> class also handles the rotations and motions of the cycle. On executing the <code class="language-plaintext highlighter-rouge">pedal()</code> function, it is ensure that only the angle of the wheels, pedal, rider and chain change by the same amount. A similar procedure is followed for the handle.</p>

<h2 id="bonus-parts">Bonus Parts</h2>

<p>In this assignment, the chain and the rider were the bonus parts. You can see them clearly here.</p>

<p><img src="https://martiansideofthemoon.github.io/assets/cycle2.png" alt="cycle2" /></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Chain</code> - The <code class="language-plaintext highlighter-rouge">Chain</code> has been built up using small cylinders of the identical radius and arranged in the correct form touching each other. While moving the chain, for each link the straight distance travelled and circular angle covered is calculated and superimposed accordingly.</p>
  </li>
  <li>
    <p><em>Ghost</em> <code class="language-plaintext highlighter-rouge">Rider</code> - The <code class="language-plaintext highlighter-rouge">Rider</code>, (a ghost, since he just has legs), is characterised by two angles, the thigh angle and the calf angle. Using the cosine rule, the correct position of the foot has been calculated after taking the pedal position as an input.</p>
  </li>
</ul>
:ET